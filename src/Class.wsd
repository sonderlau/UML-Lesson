@startuml "类图"

"sync.RWMutex" *-- "chunkserver.chunkInfo"
"sync.RWMutex" *-- "chunkserver.downloadBuffer"



"sync.RWMutex" *-- "client.leaseBuffer"


namespace gfs {
    class AppendChunkArg << (S,Aquamarine) >> {
        + DataID DataBufferID
        + Secondaries []ServerAddress

    }
    class AppendChunkReply << (S,Aquamarine) >> {
        + Offset Offset
        + ErrorCode ErrorCode

    }
    class ApplyCopyArg << (S,Aquamarine) >> {
        + Handle ChunkHandle
        + Data []byte
        + Version ChunkVersion

    }
    class ApplyCopyReply << (S,Aquamarine) >> {
        + ErrorCode ErrorCode

    }
    class ApplyMutationArg << (S,Aquamarine) >> {
        + Mtype MutationType
        + DataID DataBufferID
        + Offset Offset

    }
    class ApplyMutationReply << (S,Aquamarine) >> {
        + ErrorCode ErrorCode

    }
    class CheckVersionArg << (S,Aquamarine) >> {
        + Handle ChunkHandle
        + Version ChunkVersion

    }
    class CheckVersionReply << (S,Aquamarine) >> {
        + Stale bool

    }
    class CreateChunkArg << (S,Aquamarine) >> {
        + Handle ChunkHandle

    }
    class CreateChunkReply << (S,Aquamarine) >> {
        + ErrorCode ErrorCode

    }
    class CreateFileArg << (S,Aquamarine) >> {
        + Path Path

    }
    class CreateFileReply << (S,Aquamarine) >> {
    }
    class DataBufferID << (S,Aquamarine) >> {
        + Handle ChunkHandle
        + TimeStamp int

    }
    class DeleteFileArg << (S,Aquamarine) >> {
        + Path Path

    }
    class DeleteFileReply << (S,Aquamarine) >> {
    }
    class Error << (S,Aquamarine) >> {
        + Code ErrorCode
        + Err string

        + Error() string

    }
    class ExtendLeaseArg << (S,Aquamarine) >> {
        + Handle ChunkHandle
        + Address ServerAddress

    }
    class ExtendLeaseReply << (S,Aquamarine) >> {
        + Expire time.Time

    }
    class ForwardDataArg << (S,Aquamarine) >> {
        + DataID DataBufferID
        + Data []byte
        + ChainOrder []ServerAddress

    }
    class ForwardDataReply << (S,Aquamarine) >> {
        + ErrorCode ErrorCode

    }
    class GetChunkHandleArg << (S,Aquamarine) >> {
        + Path Path
        + Index ChunkIndex

    }
    class GetChunkHandleReply << (S,Aquamarine) >> {
        + Handle ChunkHandle

    }
    class GetFileInfoArg << (S,Aquamarine) >> {
        + Path Path

    }
    class GetFileInfoReply << (S,Aquamarine) >> {
        + IsDir bool
        + Length int64
        + Chunks int64

    }
    class GetPrimaryAndSecondariesArg << (S,Aquamarine) >> {
        + Handle ChunkHandle

    }
    class GetPrimaryAndSecondariesReply << (S,Aquamarine) >> {
        + Primary ServerAddress
        + Expire time.Time
        + Secondaries []ServerAddress

    }
    class GetReplicasArg << (S,Aquamarine) >> {
        + Handle ChunkHandle

    }
    class GetReplicasReply << (S,Aquamarine) >> {
        + Locations []ServerAddress

    }
    class HeartbeatArg << (S,Aquamarine) >> {
        + Address ServerAddress
        + LeaseExtensions []ChunkHandle
        + AbandondedChunks []ChunkHandle

    }
    class HeartbeatReply << (S,Aquamarine) >> {
        + Garbage []ChunkHandle

    }
    class Lease << (S,Aquamarine) >> {
        + Primary ServerAddress
        + Expire time.Time
        + Secondaries []ServerAddress

    }
    class ListArg << (S,Aquamarine) >> {
        + Path Path

    }
    class ListReply << (S,Aquamarine) >> {
        + Files []PathInfo

    }
    class MkdirArg << (S,Aquamarine) >> {
        + Path Path

    }
    class MkdirReply << (S,Aquamarine) >> {
    }
    class Nouse << (S,Aquamarine) >> {
    }
    class PadChunkArg << (S,Aquamarine) >> {
        + Handle ChunkHandle

    }
    class PadChunkReply << (S,Aquamarine) >> {
        + ErrorCode ErrorCode

    }
    class PathInfo << (S,Aquamarine) >> {
        + Name string
        + IsDir bool
        + Length int64
        + Chunks int64

    }
    class PersistentChunkInfo << (S,Aquamarine) >> {
        + Handle ChunkHandle
        + Length Offset
        + Version ChunkVersion
        + Checksum Checksum

    }
    class ReadChunkArg << (S,Aquamarine) >> {
        + Handle ChunkHandle
        + Offset Offset
        + Length int

    }
    class ReadChunkReply << (S,Aquamarine) >> {
        + Data []byte
        + Length int
        + ErrorCode ErrorCode

    }
    class RenameFileArg << (S,Aquamarine) >> {
        + Source Path
        + Target Path

    }
    class RenameFileReply << (S,Aquamarine) >> {
    }
    class ReportSelfArg << (S,Aquamarine) >> {
    }
    class ReportSelfReply << (S,Aquamarine) >> {
        + Chunks []PersistentChunkInfo

    }
    class SendCopyArg << (S,Aquamarine) >> {
        + Handle ChunkHandle
        + Address ServerAddress

    }
    class SendCopyReply << (S,Aquamarine) >> {
        + ErrorCode ErrorCode

    }
    class WriteChunkArg << (S,Aquamarine) >> {
        + DataID DataBufferID
        + Offset Offset
        + Secondaries []ServerAddress

    }
    class WriteChunkReply << (S,Aquamarine) >> {
        + ErrorCode ErrorCode
    }
}



"sync.RWMutex" *-- "master.chunkInfo"
"sync.RWMutex" *-- "master.chunkManager"
"sync.RWMutex" *-- "master.chunkServerManager"
"sync.RWMutex" *-- "master.fileInfo"
"sync.RWMutex" *-- "master.nsTree"


namespace util {
    class ArraySet{
        - arr []<font color=blue>interface</font>{}
        - lock sync.RWMutex

        + Add(element <font color=blue>interface</font>{}) 
        + Delete(element <font color=blue>interface</font>{}) 
        + Size() int
        + RandomPick() <font color=blue>interface</font>{}
        + GetAll() []<font color=blue>interface</font>{}
        + GetAllAndClear() []<font color=blue>interface</font>{}

    }
}

@enduml
